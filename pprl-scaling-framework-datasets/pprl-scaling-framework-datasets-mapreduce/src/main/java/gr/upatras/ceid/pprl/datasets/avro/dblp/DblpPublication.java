/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gr.upatras.ceid.pprl.datasets.avro.dblp;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DblpPublication extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DblpPublication\",\"namespace\":\"gr.upatras.ceid.pprl.datasets.avro.dblp\",\"fields\":[{\"name\":\"key\",\"type\":\"string\",\"doc\":\"DBLP key i.e /journals/acta/Author99\"},{\"name\":\"author\",\"type\":\"string\",\"doc\":\"First author of the publication\"},{\"name\":\"title\",\"type\":\"string\",\"doc\":\"Title of publication\"},{\"name\":\"year\",\"type\":\"string\",\"doc\":\"Year of publication\"}],\"doc:\":\"A cut-down version of the dblp schema for the PPRL Framework\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** DBLP key i.e /journals/acta/Author99 */
  @Deprecated public CharSequence key;
  /** First author of the publication */
  @Deprecated public CharSequence author;
  /** Title of publication */
  @Deprecated public CharSequence title;
  /** Year of publication */
  @Deprecated public CharSequence year;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DblpPublication() {}

  /**
   * All-args constructor.
   */
  public DblpPublication(CharSequence key, CharSequence author, CharSequence title, CharSequence year) {
    this.key = key;
    this.author = author;
    this.title = title;
    this.year = year;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return author;
    case 2: return title;
    case 3: return year;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: key = (CharSequence)value$; break;
    case 1: author = (CharSequence)value$; break;
    case 2: title = (CharSequence)value$; break;
    case 3: year = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * DBLP key i.e /journals/acta/Author99   */
  public CharSequence getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * DBLP key i.e /journals/acta/Author99   * @param value the value to set.
   */
  public void setKey(CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'author' field.
   * First author of the publication   */
  public CharSequence getAuthor() {
    return author;
  }

  /**
   * Sets the value of the 'author' field.
   * First author of the publication   * @param value the value to set.
   */
  public void setAuthor(CharSequence value) {
    this.author = value;
  }

  /**
   * Gets the value of the 'title' field.
   * Title of publication   */
  public CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * Title of publication   * @param value the value to set.
   */
  public void setTitle(CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'year' field.
   * Year of publication   */
  public CharSequence getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * Year of publication   * @param value the value to set.
   */
  public void setYear(CharSequence value) {
    this.year = value;
  }

  /** Creates a new DblpPublication RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }

  /** Creates a new DblpPublication RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /** Creates a new DblpPublication RecordBuilder by copying an existing DblpPublication instance */
  public static Builder newBuilder(DblpPublication other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for DblpPublication instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DblpPublication>
    implements org.apache.avro.data.RecordBuilder<DblpPublication> {

    private CharSequence key;
    private CharSequence author;
    private CharSequence title;
    private CharSequence year;

    /** Creates a new Builder */
    private Builder() {
      super(DblpPublication.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.year)) {
        this.year = data().deepCopy(fields()[3].schema(), other.year);
        fieldSetFlags()[3] = true;
      }
    }

    /** Creates a Builder by copying an existing DblpPublication instance */
    private Builder(DblpPublication other) {
            super(DblpPublication.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.year)) {
        this.year = data().deepCopy(fields()[3].schema(), other.year);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public CharSequence getKey() {
      return key;
    }

    /** Sets the value of the 'key' field */
    public Builder setKey(CharSequence value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'key' field */
    public Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'author' field */
    public CharSequence getAuthor() {
      return author;
    }

    /** Sets the value of the 'author' field */
    public Builder setAuthor(CharSequence value) {
      validate(fields()[1], value);
      this.author = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'author' field has been set */
    public boolean hasAuthor() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'author' field */
    public Builder clearAuthor() {
      author = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'title' field */
    public CharSequence getTitle() {
      return title;
    }

    /** Sets the value of the 'title' field */
    public Builder setTitle(CharSequence value) {
      validate(fields()[2], value);
      this.title = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'title' field has been set */
    public boolean hasTitle() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'title' field */
    public Builder clearTitle() {
      title = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public CharSequence getYear() {
      return year;
    }

    /** Sets the value of the 'year' field */
    public Builder setYear(CharSequence value) {
      validate(fields()[3], value);
      this.year = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'year' field */
    public Builder clearYear() {
      year = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public DblpPublication build() {
      try {
        DblpPublication record = new DblpPublication();
        record.key = fieldSetFlags()[0] ? this.key : (CharSequence) defaultValue(fields()[0]);
        record.author = fieldSetFlags()[1] ? this.author : (CharSequence) defaultValue(fields()[1]);
        record.title = fieldSetFlags()[2] ? this.title : (CharSequence) defaultValue(fields()[2]);
        record.year = fieldSetFlags()[3] ? this.year : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
